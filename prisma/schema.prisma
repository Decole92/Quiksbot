// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  fullname  String
  clerkId   String   @unique
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  stripeId  String?
  openAIkey String?
  //domains Domain[]
  credits      String? 
  ChatBot      ChatBot[]
  subscription Billings?
  Campaign     Campaign[]
}

// model Domain {
//   id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   name String
//   icon String

//   //chatBot         ChatBot?
//   helpdesk        HelpDesk[]
//   filterQuestions FilterQuestions[]
//   //products        Product[]

//   customer   Customer[]
//   User       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId     String?    @db.Uuid
//   //Campaign   Campaign?  @relation(fields: [campaignId], references: [id])
//   campaignId String?    @db.Uuid
// }

model Source {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pdfFile        PdfFile[]
  characteristic Characteristic[]
  //website_url    String?
  ChatBot        ChatBot?
}

model Characteristic {
  id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  characteristic String

  Source   Source? @relation(fields: [sourceId], references: [id])
  sourceId String? @db.Uuid
}

model PdfFile {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileName String
  file     Bytes
  Source   Source? @relation(fields: [sourceId], references: [id])
  sourceId String? @db.Uuid
}

model ChatBot {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  greetings          String?
  botIcon            String?
  icon               String?
  iconPosition       String   @default("right")
  theme              Theme    @default(light)
  userMessageBgColor String?  @default("#E1B177")
  chatModel          String   @default("gpt-3.5-turbo")
  botType            botType  @default(SalesBot)
  getDetails         Boolean  @default(false)
  prompt             String?
  role               String?
  name               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // helpdesk   Boolean @default(false)
  Source        Source?         @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  sourceId      String?         @unique @db.Uuid
  // Domain     Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  // domainId   String? @unique @db.Uuid
  firstQuestion FirstQuestion[]
  User          User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?         @db.Uuid

  helpdesk HelpDesk[]
  customer Customer[]
}

model FirstQuestion {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String

  // Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  // domainId String? @db.Uuid

  chatbot   ChatBot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId String?  @db.Uuid
}

model Billings {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan    Plans   @default(STANDARD)
 
  User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String? @unique @db.Uuid
}

model HelpDesk {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String
  answer   String

  // Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  // domainId String? @db.Uuid

  chatbot   ChatBot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId String?  @db.Uuid
}

model FilterQuestions {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String
  answered String?

  // Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  // domainId String? @db.Uuid
}

// model CustomerResponses {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   question   String
//   answered   String?
//   customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
//   customerId String   @db.Uuid
// }

model Customer {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email    String?
  name     String?
  country  String?
  city     String?
  lat      String?
  lng      String?
  chatRoom ChatRoom[]

  Chatbot   ChatBot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId String?  @db.Uuid
}

model ChatRoom {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  live       Boolean   @default(false)
  mailed     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?   @db.Uuid

  message ChatMessage[]
}

model ChatMessage {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String
  role       Role?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String?   @db.Uuid
  seen       Boolean   @default(false)
}

model Campaign {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  customers String[]
  // domain    Domain[]
  template  String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.Uuid
  createdAt DateTime @default(now())
}

enum Plans {
  STANDARD
  PRO
  ULTIMATE
}

enum botType {
  SalesBot
  ChatPdf
  Custom
}

enum Role {
  user
  ai
}

enum Theme {
  light
  dark
  system
}
