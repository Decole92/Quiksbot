// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  fullname     String
  clerkId      String    @unique
  type         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  email        String    @unique
  stripeId     String?
  openAIkey    String?
  //domains Domain[]
  credits      Int?      @default(0)
  ChatBot      ChatBot[]
  subscription Billings?
  // Campaign     Campaign[]
  Mail         Mail?
  MailId       String?
}

model Mail {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  host      String   @default("smtp.hostinger.com")
  port      Int      @default(465)
  secure    Boolean  @default(true)
  userEmail String // The email address for SMTP authentication
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relation
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @db.Uuid
}

model Source {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pdfFile        PdfFile[]
  characteristic Characteristic[]
  webpage        Website[]

  ChatBot ChatBot?
}

model Website {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  weblinks String
  content  String
  length   String
  Source   Source? @relation(fields: [sourceId], references: [id])
  sourceId String? @db.Uuid
}

model Characteristic {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  characteristic String
  Source         Source? @relation(fields: [sourceId], references: [id])
  sourceId       String? @db.Uuid
}

model PdfFile {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileName String
  file     Bytes
  Source   Source? @relation(fields: [sourceId], references: [id])
  sourceId String? @db.Uuid
}

model ChatBot {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  greetings          String?
  botIcon            String?
  icon               String?
  iconPosition       String   @default("right")
  theme              Theme    @default(light)
  watermark          Boolean  @default(true)
  userMessageBgColor String?  @default("#E1B177")
  chatModel          String   @default("gpt-3.5-turbo")
  botType            botType  @default(Defaults)
  getDetails         Boolean  @default(false)
  prompt             String?
  role               String?
  name               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  Source             Source?  @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  sourceId           String?  @unique @db.Uuid

  firstQuestion FirstQuestion[]
  User          User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?         @db.Uuid

  // helpdesk HelpDesk[]
  appointment Appointment?
  blockPage   BlockPages[]
  customer    Customer[]
}

model Appointment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  chatbot   ChatBot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId String?  @unique @db.Uuid

  appointment_type    AppointmentType[]
  timeSlot            BusinessHours[]
  appointments_client AppointmentClient[]
}

model BusinessHours {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  day           String // 'monday', 'tuesday', etc.
  startTime     String // '09:00'
  endTime       String // '17:00'
  isOpen        Boolean      @default(true)
  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String?      @db.Uuid
}

model AppointmentType {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  typeName      String // e.g., 'Consultation', 'Follow-up', 'Therapy Session'
  description   String?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String?      @db.Uuid
}

model AppointmentClient {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  email             String
  phone             String?
  createdAt         DateTime          @default(now())
  status            AppointmentStatus @default(PENDING) // Added status field
  notes             String?
  confirmationToken String
  tokenExpiry       DateTime
  tokenUsed         Boolean
  selectedDate      DateTime
  // Relations
  appointment       Appointment?      @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId     String?           @db.Uuid
  appointmentType   String // Store the selected appointment type
  selectedTime      String // Store the selected time slot
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Billings {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan Plans  @default(STANDARD)

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @db.Uuid
}

model BlockPages {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  address   String
  chatbot   ChatBot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId String?  @db.Uuid
}

model FilterQuestions {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String
  answered String?
}

model FirstQuestion {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question  String
  chatbot   ChatBot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId String?  @db.Uuid
}

model Customer {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email    String?
  name     String?
  country  String?
  city     String?
  lat      String?
  lng      String?
  chatRoom ChatRoom[]

  Chatbot   ChatBot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId String?  @db.Uuid
}

model ChatRoom {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  live       Boolean       @default(false)
  mailed     Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  Customer   Customer?     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?       @db.Uuid
  message    ChatMessage[]
}

model ChatMessage {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String
  role       Role?
  createdAt  DateTime  @default(now())
  type       Type?     @default(message_text)
  updatedAt  DateTime  @updatedAt
  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String?   @db.Uuid
  seen       Boolean   @default(false)
}

model Campaign {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject   String
  customers String[]
  template  String?
  userId    String
  createdAt DateTime @default(now())
  from      String
}

enum Plans {
  STANDARD
  PRO
  ULTIMATE
}

enum botType {
  Defaults
  Sales
  Services
  Support
  Custom
}

enum Role {
  user
  ai
}

enum Type {
  message_text
  contact_form
  appointment_form
}

enum Theme {
  light
  dark
  system
}
